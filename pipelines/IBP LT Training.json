{
	"properties": {},
	"description": "IBP LT Training",
	"processes": {
		"submitmetrics1": {
			"component": "com.sap.ml.submitMetrics",
			"metadata": {
				"label": "Submit Metrics",
				"x": 1132.9999952316284,
				"y": 40,
				"height": 80,
				"width": 120,
				"extensible": false,
				"subengines": [
					"com.sap.python36"
				],
				"config": {}
			}
		},
		"artifactproducer1": {
			"component": "com.sap.ml.artifact.producer.v2",
			"metadata": {
				"label": "Create trainedModel File",
				"x": 1132.9999952316284,
				"y": 375.9999990463257,
				"height": 80,
				"width": 120,
				"extensible": true,
				"subengines": [
					"main"
				],
				"config": {
					"artifactKind": "model",
					"artifactName": "trainedModel"
				}
			}
		},
		"artifactproducer2": {
			"component": "com.sap.ml.artifact.producer.v2",
			"metadata": {
				"label": "Create Planning Combinations File",
				"x": 1132.9999952316284,
				"y": 200,
				"height": 80,
				"width": 120,
				"extensible": true,
				"subengines": [
					"main"
				],
				"config": {
					"artifactName": "${PlanningCombinationsFilename}"
				}
			}
		},
		"jupyter2": {
			"component": "com.sap.jupyter",
			"metadata": {
				"label": "AIModel",
				"x": 594.9999990463257,
				"y": 221.99999928474426,
				"height": 80,
				"width": 120,
				"extensible": true,
				"ui": "dynpath",
				"subengines": [
					"com.sap.python36"
				],
				"config": {
					"notebookFilePath": "AIModel",
					"productive": true
				},
				"additionalinports": [
					{
						"name": "in",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "out",
						"type": "string"
					},
					{
						"name": "modelOut",
						"type": "blob"
					},
					{
						"name": "testOut",
						"type": "blob"
					}
				]
			}
		},
		"jupyter1": {
			"component": "com.sap.jupyter",
			"metadata": {
				"label": "dataProcessor",
				"x": 385.9999990463257,
				"y": 221.99999928474426,
				"height": 80,
				"width": 120,
				"extensible": true,
				"ui": "dynpath",
				"subengines": [
					"com.sap.python36"
				],
				"config": {
					"notebookFilePath": "dataProcessor",
					"productive": true
				},
				"additionalinports": [
					{
						"name": "in",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "out",
						"type": "string"
					}
				]
			}
		},
		"python3operator1": {
			"component": "com.sap.system.python3Operator",
			"metadata": {
				"label": "LT Calc",
				"x": 181,
				"y": 213.99999928474426,
				"height": 80,
				"width": 120,
				"extensible": true,
				"filesRequired": [
					"script.py"
				],
				"generation": 1,
				"config": {
					"script": "def on_input(msgmmov):\n    from io import StringIO\n    import csv    \n    import pandas as pd\n    import json\n    import numpy as np\n    \n    s = StringIO(msgmmov.body)\n           \n    a = ['DOCID','LE_VBELN','LOCFR','LOCID','PRDID','BATCHID','OTIME','QTY','RECORD_TYPE','DUMMY']\n    t = pd.read_csv(s, index_col = False, names = a)\n    t = t.replace({'DOCID': {None:''},'LOCID': {None:''},'PRDID': {None:''},'BATCHID': {None:''}})\n    t_i = t[t['RECORD_TYPE']=='I']\n    t_r = t[t['RECORD_TYPE']=='R']\n    \n    if len(t_i)>0 and len(t_r)>0:    \n        t_i['NUM'] = t_i.groupby(['DOCID','LOCID','PRDID','BATCHID','QTY'])['OTIME'].rank('dense')\n        t_r['NUM'] = t_r.groupby(['DOCID','LOCID','PRDID','BATCHID','QTY'])['OTIME'].rank('dense')\n        \n        trans = pd.merge(t_i,t_r,on=['DOCID','LOCID','PRDID','BATCHID','QTY','NUM'],how='inner')\n        trans['LT'] = trans['OTIME_y']-trans['OTIME_x']\n        trans.rename(columns={'OTIME_x':'IOTIME','OTIME_y':'ROTIME','LOCID':'LOCTO','LOCFR_x':'LOCID'},inplace=True)\n        trans = trans[['LOCID','LOCTO','PRDID','QTY','LT','IOTIME']]\n        strans = str(trans.to_json())\n\n        api.send(\"out\", strans)\n    \napi.set_port_callback([\"MMOVE\"], on_input)"
				},
				"additionalinports": [
					{
						"name": "MMOVE",
						"type": "message"
					}
				],
				"additionaloutports": [
					{
						"name": "out",
						"type": "string"
					}
				]
			}
		},
		"abapcdsreader1": {
			"component": "com.sap.abap.cds.reader",
			"metadata": {
				"label": "CDS Read Material Movements",
				"x": 12,
				"y": 213.99999928474426,
				"height": 80,
				"width": 120,
				"extensible": true,
				"generation": 1,
				"config": {
					"connectionID": "S4_QJ9",
					"operatorID": "com.sap.abap.cds.reader.v2",
					"subscriptionType": "New",
					"action": "Initial Load",
					"wireformat": "Enhanced Format Conversions",
					"cdsname": "Z_IBP_MATMOVEMENTS",
					"subscriptionName": "MATMOVE001",
					"chunkSize": 1000
				},
				"additionaloutports": [
					{
						"name": "outMessageData",
						"type": "message"
					}
				]
			}
		},
		"python3operator2": {
			"component": "com.sap.system.python3Operator",
			"metadata": {
				"label": "Write ML Metrics",
				"x": 1441.9999933242798,
				"y": 139.99999952316284,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"script": "def on_inputs_ready(metrics_resp, artifact_id, test_in):\n    # both input ports have data - previous operators have completed. Send a message as output to stop the graph\n    api.send(\"output\", \"done\")\n\napi.set_port_callback([\"metricsResponse\", \"artifactId\", \"testIn\"], on_inputs_ready)"
				},
				"additionalinports": [
					{
						"name": "metricsResponse",
						"type": "message"
					},
					{
						"name": "artifactId",
						"type": "message"
					},
					{
						"name": "testIn",
						"type": "message"
					}
				],
				"additionaloutports": [
					{
						"name": "output",
						"type": "string"
					}
				]
			}
		},
		"tomessageconverter1": {
			"component": "com.sap.util.toMessageConverter",
			"metadata": {
				"label": "ToMessage Converter",
				"x": 906.499997138977,
				"y": 70.99999976158142,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"graphterminator1": {
			"component": "com.sap.util.graphTerminator",
			"metadata": {
				"label": "Graph Terminator",
				"x": 1626.9999923706055,
				"y": 213.99999928474426,
				"height": 80,
				"width": 120,
				"config": {}
			}
		},
		"writefile1": {
			"component": "com.sap.file.write",
			"metadata": {
				"label": "Write trainedModel File",
				"x": 1441.9999933242798,
				"y": 259.99999952316284,
				"height": 80,
				"width": 120,
				"config": {}
			}
		},
		"writefile2": {
			"component": "com.sap.file.write",
			"metadata": {
				"label": "Write Planning Combinations File",
				"x": 871.999997138977,
				"y": 250.99999976158142,
				"height": 80,
				"width": 120,
				"config": {}
			}
		},
		"tomessageconverter2": {
			"component": "com.sap.util.toMessageConverter",
			"metadata": {
				"label": "ToMessage Converter",
				"x": 906.499997138977,
				"y": 386.9999988079071,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"tomessageconverter3": {
			"component": "com.sap.util.toMessageConverter",
			"metadata": {
				"label": "ToMessage Converter",
				"x": 906.499997138977,
				"y": 160.99999976158142,
				"height": 50,
				"width": 50,
				"config": {}
			}
		}
	},
	"groups": [
		{
			"name": "group3",
			"nodes": [
				"submitmetrics1"
			],
			"metadata": {
				"description": "Group"
			}
		},
		{
			"name": "group1",
			"nodes": [
				"artifactproducer1"
			],
			"metadata": {
				"description": "Group"
			}
		},
		{
			"name": "group2",
			"nodes": [
				"artifactproducer2"
			],
			"metadata": {
				"description": "Group"
			}
		},
		{
			"name": "group4",
			"nodes": [
				"jupyter2"
			],
			"metadata": {
				"description": "Group"
			},
			"tags": {
				"catboost": "",
				"sklearn": "",
				"mathplotlib": "3.2",
				"seaborn": ""
			}
		},
		{
			"name": "group5",
			"nodes": [
				"jupyter1"
			],
			"metadata": {
				"description": "Group"
			},
			"tags": {
				"seaborn": ""
			}
		}
	],
	"connections": [
		{
			"metadata": {
				"points": "718.9999990463257,243.99999928474426 746.9999985694885,243.99999928474426 746.9999985694885,250.99999928474426 822.9999976158142,250.99999928474426 822.9999976158142,86.99999976158142 901.499997138977,86.99999976158142"
			},
			"src": {
				"port": "out",
				"process": "jupyter2"
			},
			"tgt": {
				"port": "inbody",
				"process": "tomessageconverter1"
			}
		},
		{
			"metadata": {
				"points": "960.499997138977,95.99999976158142 1023.9999966621399,95.99999976158142 1023.9999966621399,80 1127.9999952316284,80"
			},
			"src": {
				"port": "out",
				"process": "tomessageconverter1"
			},
			"tgt": {
				"port": "metrics",
				"process": "submitmetrics1"
			}
		},
		{
			"metadata": {
				"points": "1565.9999933242798,179.99999952316284 1593.9999928474426,179.99999952316284 1593.9999928474426,253.99999928474426 1621.9999923706055,253.99999928474426"
			},
			"src": {
				"port": "output",
				"process": "python3operator2"
			},
			"tgt": {
				"port": "stop",
				"process": "graphterminator1"
			}
		},
		{
			"metadata": {
				"points": "1256.9999952316284,80 1360.999993801117,80 1360.999993801117,161.99999952316284 1436.9999933242798,161.99999952316284"
			},
			"src": {
				"port": "response",
				"process": "submitmetrics1"
			},
			"tgt": {
				"port": "metricsResponse",
				"process": "python3operator2"
			}
		},
		{
			"metadata": {
				"points": "1256.9999952316284,433.9999990463257 1284.9999947547913,433.9999990463257 1284.9999947547913,421.4999990463257 1392.999993801117,421.4999990463257 1392.999993801117,299.99999952316284 1436.9999933242798,299.99999952316284"
			},
			"src": {
				"port": "outFileSend",
				"process": "artifactproducer1"
			},
			"tgt": {
				"port": "file",
				"process": "writefile1"
			}
		},
		{
			"metadata": {
				"points": "1565.9999933242798,290.99999952316284 1593.9999928474426,290.99999952316284 1593.9999928474426,367.9999990463257 1408.999993801117,367.9999990463257 1408.999993801117,495.9999985694885 1023.9999966621399,495.9999985694885 1023.9999966621399,421.4999990463257 1099.9999957084656,421.4999990463257 1099.9999957084656,424.9999990463257 1127.9999952316284,424.9999990463257"
			},
			"src": {
				"port": "file",
				"process": "writefile1"
			},
			"tgt": {
				"port": "inFileReturn",
				"process": "artifactproducer1"
			}
		},
		{
			"metadata": {
				"points": "1256.9999952316284,397.9999990463257 1284.9999947547913,397.9999990463257 1284.9999947547913,410.4999990463257 1376.999993801117,410.4999990463257 1376.999993801117,179.99999952316284 1436.9999933242798,179.99999952316284"
			},
			"src": {
				"port": "outArtifact",
				"process": "artifactproducer1"
			},
			"tgt": {
				"port": "artifactId",
				"process": "python3operator2"
			}
		},
		{
			"metadata": {
				"points": "509.9999990463257,261.99999928474426 589.9999990463257,261.99999928474426"
			},
			"src": {
				"port": "out",
				"process": "jupyter1"
			},
			"tgt": {
				"port": "in",
				"process": "jupyter2"
			}
		},
		{
			"metadata": {
				"points": "1256.9999952316284,258 1284.9999947547913,258 1284.9999947547913,245.5 1360.999993801117,245.5 1360.999993801117,319.99999952316284 1023.9999966621399,319.99999952316284 1023.9999966621399,358.99999928474426 838.9999976158142,358.99999928474426 838.9999976158142,290.9999997615814 866.999997138977,290.9999997615814"
			},
			"src": {
				"port": "outFileSend",
				"process": "artifactproducer2"
			},
			"tgt": {
				"port": "file",
				"process": "writefile2"
			}
		},
		{
			"metadata": {
				"points": "995.999997138977,281.9999997615814 1023.9999966621399,281.9999997615814 1023.9999966621399,245.5 1099.9999957084656,245.5 1099.9999957084656,249 1127.9999952316284,249"
			},
			"src": {
				"port": "file",
				"process": "writefile2"
			},
			"tgt": {
				"port": "inFileReturn",
				"process": "artifactproducer2"
			}
		},
		{
			"metadata": {
				"points": "1256.9999952316284,222 1284.9999947547913,222 1284.9999947547913,234.5 1392.999993801117,234.5 1392.999993801117,197.99999952316284 1436.9999933242798,197.99999952316284"
			},
			"src": {
				"port": "outArtifact",
				"process": "artifactproducer2"
			},
			"tgt": {
				"port": "testIn",
				"process": "python3operator2"
			}
		},
		{
			"metadata": {
				"points": "960.499997138977,411.9999988079071 1023.9999966621399,411.9999988079071 1023.9999966621399,410.4999990463257 1099.9999957084656,410.4999990463257 1099.9999957084656,406.9999990463257 1127.9999952316284,406.9999990463257"
			},
			"src": {
				"port": "out",
				"process": "tomessageconverter2"
			},
			"tgt": {
				"port": "inArtifact",
				"process": "artifactproducer1"
			}
		},
		{
			"metadata": {
				"points": "718.9999990463257,261.99999928474426 822.9999976158142,261.99999928474426 822.9999976158142,402.9999988079071 901.499997138977,402.9999988079071"
			},
			"src": {
				"port": "modelOut",
				"process": "jupyter2"
			},
			"tgt": {
				"port": "inbody",
				"process": "tomessageconverter2"
			}
		},
		{
			"metadata": {
				"points": "960.499997138977,185.99999976158142 1023.9999966621399,185.99999976158142 1023.9999966621399,234.5 1099.9999957084656,234.5 1099.9999957084656,231 1127.9999952316284,231"
			},
			"src": {
				"port": "out",
				"process": "tomessageconverter3"
			},
			"tgt": {
				"port": "inArtifact",
				"process": "artifactproducer2"
			}
		},
		{
			"metadata": {
				"points": "718.9999990463257,279.99999928474426 746.9999985694885,279.99999928474426 746.9999985694885,272.99999928474426 838.9999976158142,272.99999928474426 838.9999976158142,176.99999976158142 901.499997138977,176.99999976158142"
			},
			"src": {
				"port": "testOut",
				"process": "jupyter2"
			},
			"tgt": {
				"port": "inbody",
				"process": "tomessageconverter3"
			}
		},
		{
			"metadata": {
				"points": "305,253.99999928474426 332.99999952316284,253.99999928474426 332.99999952316284,261.99999928474426 380.9999990463257,261.99999928474426"
			},
			"src": {
				"port": "out",
				"process": "python3operator1"
			},
			"tgt": {
				"port": "in",
				"process": "jupyter1"
			}
		},
		{
			"metadata": {
				"points": "136,253.99999928474426 176,253.99999928474426"
			},
			"src": {
				"port": "outMessageData",
				"process": "abapcdsreader1"
			},
			"tgt": {
				"port": "MMOVE",
				"process": "python3operator1"
			}
		}
	],
	"inports": {},
	"outports": {},
	"metadata": {}
}
