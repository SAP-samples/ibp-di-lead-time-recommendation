{
	"component": "com.sap.system.python3Operator",
	"description": "Python Write IBP",
	"inports": [
		{
			"name": "in",
			"type": "string"
		}
	],
	"outports": [
		{
			"name": "out",
			"type": "string"
		}
	],
	"tags": {},
	"subenginestags": {
		"com.sap.python36": {
			"python_requests": "",
			"tornado": "5.0.2"
		}
	},
	"config": {
		"$type": "http://sap.com/vflow/Python Write IBP.configSchema.json",
		"script": "import json\r\nimport math\r\n\r\nimport requests\r\nimport pandas as pd\r\n\r\nsession = requests.Session()\r\n\r\ndef getTransactionID(url, planningArea, user, password):\r\n    fullUrl = url + \"/getTransactionID\"\r\n    param = {'P_EntityName' : planningArea}\r\n    header = {\"X-CSRF-Token\" : \"Fetch\"}\r\n    r = session.get(fullUrl, params = param, headers = header, auth=(user, password))\r\n    r.encoding = 'utf-8'\r\n    resIndex = r.text.find('TRANSACTIONID') + 31\r\n    id = r.text[r.text.find(\"<d:Value>\") + 9 : r.text.find(\"</d:Value>\")]\r\n    token = r.headers['X-CSRF-Token']\r\n    return id, token\r\n\r\ndef onInput(data):\r\n    global dataframe\r\n    conn = api.config.ODataConnection[\"connectionProperties\"]\r\n    url = conn[\"url\"]\r\n    planningArea = api.config.planningArea\r\n    batchSize = api.config.batchSize\r\n    user = conn[\"user\"]\r\n    password = conn[\"password\"]\r\n    transactionID, token = getTransactionID(url, planningArea, user, password)\r\n    \r\n    fullUrl = url + \"/\" + planningArea + \"Trans\"\r\n    header = {\"X-CSRF-Token\" : token,\r\n        \"Content-Type\" : \"application/json\"\r\n    }\r\n    dataframe = pd.read_json(data)\r\n    nav_name = \"Nav\" + planningArea\r\n    iterator = dataframe.itertuples(index=False)\r\n    counter = 0\r\n    for batch in range(0, math.ceil(len(dataframe.index)/batchSize)):\r\n        transactionID, token = getTransactionID(url, planningArea, user, password)\r\n        to_send = {\r\n            \"AggregationLevelFieldsString\": getAggregationFields(),\r\n            \"DoCommit\": True,\r\n            \"VersionID\" : \"__BASELINE\",\r\n            nav_name: [],\r\n            \"Transactionid\": transactionID\r\n        }\r\n\r\n        for row in iterator:\r\n            row_json = getRowJSON(row)\r\n            to_send[nav_name].append(row_json)\r\n            \r\n            if counter == batchSize - 1:\r\n                counter = 0\r\n                break\r\n            counter += 1\r\n                \r\n        r = session.post(fullUrl, data = json.dumps(to_send), headers = header, auth=(user, password))\r\n        api.send(\"out\", json.dumps(to_send))\r\n        api.send(\"out\", '*********************')\r\n        #api.send(\"out\", str(r.status_code))\r\n        api.send(\"out\", str(r.text))\r\n    \r\n      \r\ndef getRowJSON(row): # Iterates through the columns of a specific row and constructs ODATA-appropriate JSON for that row\r\n    row_json = {}\r\n    for column_name, column_value in enumerate(row):\r\n        val_str = str(round(column_value,6)) if type(column_value) == float else str(column_value)\r\n        row_json[dataframe.columns.values[column_name]] = val_str # Everything that is sent must be sent as a string\r\n    return row_json\r\n    \r\ndef getAggregationFields():\r\n    columns = dataframe.columns.values.tolist()\r\n    fields_string = \"\"\r\n    for name in columns:\r\n        fields_string += name + \",\"\r\n    fields_string = fields_string[0:-1] # Getting rid of last \", \"\r\n    return fields_string\r\napi.set_port_callback('in', onInput)",
		"planningArea": "DIHUBPA",
		"batchSize": 1000
	},
	"versionStatus": "active",
	"icon": "puzzle-piece"
}